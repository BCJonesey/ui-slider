{{#demo-css class='container'}}
<h1 id="title"><a href="https://github.com/lifegadget/ui-slider">ui-slider</a></h1>
<h2>A versatile slider control for ambitious Ember apps</h2>

<h3>Background</h3>
<p>
  This control sits on the shoulder of the great work from @seiyria and @revolution on their <a href="https://github.com/seiyria/bootstrap-slider">bootstrap-slider</a> control. The primary focus of this Ember addon is just to make this work easily accessible to Ember developers.
</p>
<h3>Basic Usage</h3>
<row>
  <widget>
    {{ui-slider}}
  </widget>
  <code>
    {{display-component componentName='ui-slider'}}
  </code>
  <description>
    A plain slider control defaults to 1 to 10 integer slider.
  </description>
</row>
<row>
  <widget>
    {{ui-slider
      value=value
      min=min
      max=max
      step=step
      tooltip=tooltip
      disabled=disabled
      handle=handle
      reversed=reversed
      selection=selection
      tooltipPosition=tooltipPosition
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      value=value
      min=min
      max=max
      step=step
      tooltip=tooltip
      disabled=disabled
      handle=handle
      selection=selection
      reversed=reversed
      tooltipPosition=tooltipPosition
    }}
  </code>
  <description>
    The most basic parameters are those used to set the appropriate range of numbers:

    <controls>
      <control>
        <span class='name'>min</span>
        <span>{{number-input step=1 skin='flat' value=min}}</span>
        <span></span>
        <span class='name'>max</span>
        <span>{{number-input step=1 skin='flat' value=max}}</span>
        <span class='name'>step</span>
        <span>{{number-input step=0.25 skin='flat' value=step}}</span>
      </control>
    </controls>
    <controls>
      <control>
        <span class='name'>It is also possible to enable/disable</span>
        <span>{{ui-toggle-button on='disabled' off='enabled' value=disabled}}</span>
      </control>
      <control>
        <span class='name'>Tooltips can be:</span>
        <span>
          {{radio-buttons buttons='show,hide,always' value=tooltip size='small'}} &nbsp;
          {{radio-buttons buttons='top,bottom' value=tooltipPosition size='small'}}
        </span>
      </control>
      <control>
        <span class='name'>Handle shape:</span>
        <span>{{radio-buttons buttons='round,square,triangle' value=handle}}</span>
      </control>
      <control>
        <span class='name'>Reversed:</span>
        <span>{{ui-toggle-button on='reversed' off='normal' value=reversed}}</span>
      </control>
      <control>
        <span class='name'>Selection:</span>
        <span>{{radio-buttons buttons='before,after,none' value=selection}}</span>
      </control>
    </controls>
  </description>
</row>

<h3>Mood Styling and Sections</h3>
<row>
  <widget>
    {{ui-slider
      mood=mood
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      mood=mood
    }}
  </code>
  <description>
    This control provides lots of CSS hooks to style off of but also includes some standard ones that might be helpful out of the box:
    <controls>
      <control>
      <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='none:::null,success,info,warning,error' value=mood}}</span>
      </control>
    </controls>
    <p>
      All that's happening in this situation is the mood property is being added as a class called <prop>mood-[xxxx]</prop>. These properties are defined and of course you can set your own or override these.
    </p>
  </description>
</row>
<row>
  <widget>
    {{ui-slider
      mood=mood2
      sections=sections
      action='sectionsAction'
      max=100
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      mood=mood2
      sections=sections
      max=100
    }}
  </code>
  <description>
    Beyond <i>mood styling</i>, you can segment the range of your slider into discrete section and style differently based on value. This can either be done by stating how many sections to divy up your values range up by or by stating discrete boundaries for the sections.
    <controls>
      <control>
        <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='success,info,warn::warning,err::error,rag,gar,ragar' value=mood2 size='small'}}</span>
      </control>
      <control>
        <span class='name'>sections:</span>
        <span>{{radio-buttons buttons='none:::null,3:::3,4:::4,5:::5,10:::10,discrete:::3|6|9' value=sections size='small'}}</span>
      </control>
    </controls>
    <p>
      Now whenever the value changes it recalculates what "section" it is and applies the meta-information. The mood settings do have some values for sectional variation so you'll see the gradiation as you move it back and forth but check the underlying HTML to understand what's happening.
    </p>
  </description>
</row>

<h3>Ticks</h3>
<row>
  <widget>
    {{ui-slider
      ticks="0,100,200,300,400"
      ticksLabels="$0,$100,$200,$300,$400"
      ticksSnapBounds=15
      tooltip='hide'
      min=0
      max=400
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      ticks="0,100,200,150,400"
      ticksLabels="$0,$100,$200,$300,$400"
      ticksSnapBounds=15
      tooltip='hide'
      min=0
      max=400
    }}
  </code>
  <description>
    This control provides lots of CSS hooks to style off of but also includes some standard ones that might be helpful out of the box:
    <controls>
      <control>
      <span class='name'>mood:</span>
        <span>{{radio-buttons buttons='none:::null,success,info,warning,error' value=mood}}</span>
      </control>
    </controls>
    <p>
      All that's happening in this situation is the mood property is being added as a class called <prop>mood-[xxxx]</prop>. These properties are defined and of course you can set your own or override these.
    </p>
  </description>
</row>

<h3>Data down, actions up</h3>
<row>
  <widget>
    {{ui-slider
      defaultValue=defaultValue
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      defaultValue=defaultValue
    }}
  </code>
  <description>
    In the previous example you saw that there is a two-way binding to <prop>value</prop> but if you prefer a one-way binding then this can be achieved by just binding to the <prop>defaultValue</prop> property instead.
  </description>
</row>
<row>
  <widget>
    {{ui-slider
      value=DDAUvalue
      defaultValue=defaultValue2
      min=min2
      max=max2
      step=step2
      action='action'
      error='error'
      changed='changed'
      disabled=disabled2
    }}
  </widget>
  <code>
    {{display-component componentName='ui-slider'
      value=DDAUvalue
      defaultValue=defaultValue2
      min=min2
      max=max2
      step=step2
      action='action'
      error='error'
      changed='changed'
      disabled=disabled2
    }}
  </code>
  <description>
    There are three actions available for containers to bind action handlers to:

    <ul>
      <li><b>action</b> - provides a commentary actions such as <i>slideStart</i>, <i>slideStop</i>, <i>slideEnabled</i>, and <i>slideDisabled</i></li>
      <li><b>error</b> - indicates when constraints have been violated</li>
      <li><b>changed</b> - indicates when values have changed</li>
    </ul>

    <controls>
      <control>
        <span class='name'>set value to:</span>
        <span>{{ui-buttons buttons='20:::20,60:::60,100:::100,150:::150' action='valueChanged'}}</span>
      </control>
      <control>
        <span class='name'>Use enable/disable to trigger actions</span>
        <span>{{ui-toggle-button on='disabled' off='enabled' value=disabled2}}</span>
      </control>

    </controls>
  </description>
</row>

<h3>Range Slider</h3>
<p>Unlike the normal <prop>ui-slider</prop> the <prop>range-slider</prop> has two values which together represent a range. This component's <prop>value</prop> property is a two element array but outside of that it has more similarities than differences.</p>
<row>
  <widget>
    {{ui-slider}}
  </widget>
  <code>
    {{display-component componentName='range-slider'
      defaultValue=defaultValue
    }}
  </code>
  <description>
    In the previous example you saw that there is a two-way binding to <prop>value</prop> but if you prefer a one-way binding then this can be achieved by just binding to the <prop>defaultValue</prop> property instead.
  </description>
</row>

{{/demo-css}}
